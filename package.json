{
    "name": "gltf-vscode",
    "displayName": "glTF Tools",
    "description": "Tools for editing and previewing glTF files",
    "version": "2.0.9",
    "publisher": "cesium",
    "license": "Apache-2.0",
    "repository": {
        "url": "https://github.com/AnalyticalGraphicsInc/gltf-vscode"
    },
    "icon": "images/gltf.png",
    "engines": {
        "vscode": "^1.17.0"
    },
    "categories": [
        "Formatters",
        "Linters"
    ],
    "activationEvents": [
        "onLanguage:json",
        "onCommand:gltf.inspectDataUri",
        "onCommand:gltf.importUri",
        "onCommand:gltf.exportUri",
        "onCommand:gltf.previewModel",
        "onCommand:gltf.treeView",
        "onCommand:gltf.exportGlbFile",
        "onCommand:gltf.importGlbFile"
    ],
    "main": "./out/src/extension",
    "contributes": {
        "configuration": {
            "title": "glTF configuration",
            "properties": {
                "glTF.defaultV1Engine": {
                    "type": "string",
                    "default": "Cesium",
                    "enum": [
                        "Babylon.js",
                        "Cesium",
                        "Three.js"
                    ],
                    "description": "The default 3D engine that will be used when previewing a glTF 1.0 model.  You can always change the current engine within the preview pane."
                },
                "glTF.defaultV2Engine": {
                    "type": "string",
                    "default": "Babylon.js",
                    "enum": [
                        "Babylon.js",
                        "Cesium",
                        "Three.js"
                    ],
                    "description": "The default 3D engine that will be used when previewing a glTF 2.0 model.  You can always change the current engine within the preview pane."
                },
                "glTF.Babylon.environment": {
                    "type": "string",
                    "default": "{extensionRootPath}/environments/babylon/countrySpecularHDR.dds",
                    "description": "The path to a BabylonJS-ready DDS environment file.  See: http://doc.babylonjs.com/overviews/physically_based_rendering#creating-a-dds-environment-file-from-an-hdr-image"
                },
                "glTF.Three.environment": {
                    "type": "string",
                    "default": "{extensionRootPath}/environments/threejs/Park2/{face}.jpg",
                    "description": "The path to a set of environment cube faces usable by ThreeJS.  Use {face} for the face name, and six files must exist with the following face names: posx, negx, posy, negy, posz, and negz."
                },
                "glTF.alwaysOverwriteDefaultFilename": {
                    "type": "boolean",
                    "default": false,
                    "description": "When creating a filesystem file from glTF or GLB import or export should a prompt be shown to select the result filename?"
                },
                "glTF.Validation.maxNumberOfProblems": {
                    "scope": "resource",
                    "type": "number",
                    "default": 100,
                    "description": "Controls the maximum number of problems produced by the glTF Validator."
                }
            }
        },
        "commands": [
            {
                "command": "gltf.inspectDataUri",
                "title": "glTF: Inspect Data URI"
            },
            {
                "command": "gltf.importUri",
                "title": "glTF: Import file as Data URI"
            },
            {
                "command": "gltf.exportUri",
                "title": "glTF: Export a Data URI to a file"
            },
            {
                "command": "gltf.previewModel",
                "title": "glTF: Preview 3D Model"
            },
            {
                "command": "gltf.treeView",
                "title": "glTF: Tree View of Scene Nodes"
            },
            {
                "command": "gltf.exportGlbFile",
                "title": "glTF: Export to GLB (Binary file)"
            },
            {
                "command": "gltf.importGlbFile",
                "title": "glTF: Import from GLB"
            }
        ],
        "keybindings": [
            {
                "command": "gltf.inspectDataUri",
                "key": "alt+d",
                "mac": "alt+d",
                "when": "editorTextFocus && editorLangId == 'json'"
            },
            {
                "command": "gltf.previewModel",
                "key": "alt+g",
                "mac": "alt+g",
                "when": "editorTextFocus && editorLangId == 'json'"
            },
            {
                "command": "gltf.exportGlbFile",
                "key": "alt+shift+s e",
                "mac": "alt+shift+s e",
                "when": "editorTextFocus && editorLangId == 'json'"
            }
        ],
        "menus": {
            "explorer/context": [
                {
                    "command": "gltf.importGlbFile",
                    "group": "glTF"
                }
            ],
            "editor/context": [
                {
                    "command": "gltf.previewModel",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.inspectDataUri",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                }
            ],
            "editor/title": [
                {
                    "command": "gltf.previewModel",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.treeView",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                }
            ],
            "editor/title/context": [
                {
                    "command": "gltf.previewModel",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.treeView",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.inspectDataUri",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.importUri",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.exportUri",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.exportGlbFile",
                    "when": "resourceLangId == json",
                    "group": "glTF"
                },
                {
                    "command": "gltf.importGlbFile",
                    "group": "glTF"
                }
            ]
        },
        "languages": [
            {
                "id": "json",
                "extensions": [
                    ".gltf"
                ]
            }
        ],
        "jsonValidation": [
            {
                "fileMatch": "*.gltf",
                "url": "./schemas/glTF.chooser.schema.json"
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "tsc -p ./",
        "postinstall": "cd server && npm install && cd .. && node ./node_modules/vscode/bin/install",
        "compile": "tsc -p ./tsconfig.json && cd server && npm run installServer && cd .. && tsc -p server/tsconfig.json",
        "compile:client": "tsc -p ./tsconfig.json",
        "watch:client": "tsc -w -p ./tsconfig.json",
        "compile:server": "cd server && npm run installServer && cd .. && tsc -p server/tsconfig.json",
        "watch:server": "cd server && npm run installServer && cd .. && tsc -w -p server/tsconfig.json"
    },
    "devDependencies": {
        "jshint": "^2.9.4",
        "yargs": "^6.5.0",
        "typescript": "^2.5.2",
        "mocha": "^3.5.0",
        "@types/node": "^6.0.88",
        "@types/mocha": "^2.2.42"
    },
    "dependencies": {
        "json-source-map": "^0.4.0",
        "vscode": "^1.1.5",
        "vscode-languageclient": "3.3.0",
        "gltf-validator": "2.0.0-dev.1",
        "jstree": "^3.3.4",
        "jquery": "^3.2.1",
        "babylonjs": "^3.1.0-alpha3.5"
    }
}
