{
    "$schema" : "http://json-schema.org/draft-04/schema",
    "title" : "Shader",
    "type" : "object",
    "description" : "A vertex or fragment shader. Exactly one of `uri` or `bufferView` must be provided for the GLSL source.",
    "allOf" : [
        {
            "$ref" : "../../glTFChildOfRootProperty.schema.json"
        }
    ],
    "properties" : {
        "uri" : {
            "type" : "string",
            "description" : "The uri of the GLSL source.  Relative paths are relative to the `.gltf` file.  Instead of referencing an external file, the uri can also be a data-uri.",
            "format" : "uriref",
            "gltf_uriType" : "text",
            "short_description" : "The uri of the GLSL source."
        },
        "type" : {
            "description" : "The shader stage.  All valid values correspond to WebGL enums.",
            "oneOf" : [
                {
                    "enum" : [
                        35632
                    ],
                    "description" : "FRAGMENT_SHADER - The shader stage."
                },
                {
                    "enum" : [
                        35633
                    ],
                    "description" : "VERTEX_SHADER - The shader stage."
                }
            ],
            "short_description" : "The shader stage."
        },
        "bufferView" : {
            "allOf" : [
                {
                    "$ref" : "../../glTFid.schema.json"
                }
            ],
            "description" : "The index of the bufferView that contains the GLSL shader source. Use this instead of the shader's uri property."
        },
        "name" : {},
        "extensions" : {},
        "extras" : {}
    },
    "required" : [
        "type"
    ],
    "oneOf" : [
        {
            "required" : [
                "uri"
            ]
        },
        {
            "required" : [
                "bufferView"
            ]
        }
    ],
    "gltf_webgl" : "`createShader()`, `deleteShader()`, `shaderSource()`, `compileShader()`, `getShaderParameter()`, and `getShaderInfoLog()`"
}
