{
    "$schema" : "http://json-schema.org/draft-04/schema",
    "title" : "primitive",
    "type" : "object",
    "description" : "Geometry to be rendered with the given material.",
    "allOf" : [
        {
            "$ref" : "glTFProperty.schema.json"
        }
    ],
    "properties" : {
        "attributes" : {
            "type" : "object",
            "description" : "A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data.",
            "minProperties" : 1,
            "additionalProperties" : {
                "$ref" : "glTFid.schema.json"
            }
        },
        "indices" : {
            "allOf" : [
                {
                    "$ref" : "glTFid.schema.json"
                }
            ],
            "description" : "The index of the accessor that contains mesh indices.  When this is not defined, the primitives should be rendered without indices using `drawArrays()`.  When defined, the accessor must contain indices: the `bufferView` referenced by the accessor should have a `target` equal to 34963 (ELEMENT_ARRAY_BUFFER); `componentType` must be 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT) or 5125 (UNSIGNED_INT), the latter may require enabling additional hardware support; `type` must be `\"SCALAR\"`. For triangle primitives, the front face has a counter-clockwise (CCW) winding order.",
            "short_description" : "The index of the accessor that contains the indices."
        },
        "material" : {
            "allOf" : [
                {
                    "$ref" : "glTFid.schema.json"
                }
            ],
            "description" : "The index of the material to apply to this primitive when rendering."
        },
        "mode" : {
            "description" : "The type of primitives to render. All valid values correspond to WebGL enums.",
            "default" : 4,
            "anyOf" : [
                {
                    "enum" : [
                        0
                    ],
                    "description" : "POINTS - The type of primitives to render."
                },
                {
                    "enum" : [
                        1
                    ],
                    "description" : "LINES - The type of primitives to render."
                },
                {
                    "enum" : [
                        2
                    ],
                    "description" : "LINE_LOOP - The type of primitives to render."
                },
                {
                    "enum" : [
                        3
                    ],
                    "description" : "LINE_STRIP - The type of primitives to render."
                },
                {
                    "enum" : [
                        4
                    ],
                    "description" : "TRIANGLES - The type of primitives to render."
                },
                {
                    "enum" : [
                        5
                    ],
                    "description" : "TRIANGLE_STRIP - The type of primitives to render."
                },
                {
                    "enum" : [
                        6
                    ],
                    "description" : "TRIANGLE_FAN - The type of primitives to render."
                },
                {
                    "type" : "integer"
                }
            ],
            "short_description" : "The type of primitives to render."
        },
        "targets" : {
            "type" : "array",
            "description" : "An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.",
            "items" : {
                "type" : "object",
                "minProperties" : 1,
                "additionalProperties" : {
                    "$ref" : "glTFid.schema.json"
                },
                "description" : "A dictionary object specifying attributes displacements in a Morph Target, where each key corresponds to one of the three supported attribute semantic (`POSITION`, `NORMAL`, or `TANGENT`) and each value is the index of the accessor containing the attribute displacements' data."
            },
            "minItems" : 1
        },
        "extensions" : {},
        "extras" : {}
    },
    "gltf_webgl" : "`drawElements()` and `drawArrays()`",
    "required" : [
        "attributes"
    ]
}
