{
    "$schema" : "http://json-schema.org/draft-04/schema",
    "title" : "Material",
    "type" : "object",
    "description" : "The material appearance of a primitive.",
    "allOf" : [
        {
            "$ref" : "glTFChildOfRootProperty.schema.json"
        }
    ],
    "properties" : {
        "name" : {},
        "extensions" : {
            "properties" : {
                "KHR_materials_clearcoat" : {
                    "allOf" : [
                        {
                            "$ref" : "extensions/KHR_materials_clearcoat/glTF.KHR_materials_clearcoat.schema.json"
                        }
                    ]
                },
                "KHR_materials_pbrSpecularGlossiness" : {
                    "allOf" : [
                        {
                            "$ref" : "extensions/KHR_materials_pbrSpecularGlossiness/glTF.KHR_materials_pbrSpecularGlossiness.schema.json"
                        }
                    ]
                },
                "KHR_materials_transmission" : {
                    "allOf" : [
                        {
                            "$ref" : "extensions/KHR_materials_transmission/glTF.KHR_materials_transmission.schema.json"
                        }
                    ]
                },
                "KHR_materials_unlit" : {
                    "allOf" : [
                        {
                            "$ref" : "extensions/KHR_materials_unlit/glTF.KHR_materials_unlit.schema.json"
                        }
                    ]
                },
                "KHR_xmp" : {
                    "allOf" : [
                        {
                            "$ref" : "extensions/KHR_xmp/node.KHR_xmp.schema.json"
                        }
                    ]
                }
            }
        },
        "extras" : {},
        "pbrMetallicRoughness" : {
            "allOf" : [
                {
                    "$ref" : "material.pbrMetallicRoughness.schema.json"
                }
            ],
            "description" : "A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply."
        },
        "normalTexture" : {
            "allOf" : [
                {
                    "$ref" : "material.normalTextureInfo.schema.json"
                }
            ],
            "description" : "A tangent space normal map. The texture contains RGB components in linear space. Each texel represents the XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1]. Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer. In GLSL, this vector would be unpacked like so: `float3 normalVector = tex2D(<sampled normal map texture value>, texCoord) * 2 - 1`. Client implementations should normalize the normal vectors before using them in lighting equations.",
            "short_description" : "The normal map texture."
        },
        "occlusionTexture" : {
            "allOf" : [
                {
                    "$ref" : "material.occlusionTextureInfo.schema.json"
                }
            ],
            "description" : "The occlusion map texture. The occlusion values are sampled from the R channel. Higher values indicate areas that should receive full indirect lighting and lower values indicate no indirect lighting. These values are linear. If other channels are present (GBA), they are ignored for occlusion calculations.",
            "short_description" : "The occlusion map texture."
        },
        "emissiveTexture" : {
            "allOf" : [
                {
                    "$ref" : "textureInfo.schema.json"
                }
            ],
            "description" : "The emissive map controls the color and intensity of the light being emitted by the material. This texture contains RGB components encoded with the sRGB transfer function. If a fourth component (A) is present, it is ignored.",
            "short_description" : "The emissive map texture."
        },
        "emissiveFactor" : {
            "type" : "array",
            "items" : {
                "type" : "number",
                "minimum" : 0,
                "maximum" : 1
            },
            "minItems" : 3,
            "maxItems" : 3,
            "default" : [
                0,
                0,
                0
            ],
            "description" : "The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values.",
            "short_description" : "The emissive color of the material."
        },
        "alphaMode" : {
            "default" : "OPAQUE",
            "description" : "The material's alpha rendering mode enumeration specifying the interpretation of the alpha value of the main factor and texture.",
            "anyOf" : [
                {
                    "enum" : [
                        "OPAQUE"
                    ],
                    "description" : "The alpha value is ignored and the rendered output is fully opaque. - The alpha rendering mode of the material."
                },
                {
                    "enum" : [
                        "MASK"
                    ],
                    "description" : "The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value. - The alpha rendering mode of the material."
                },
                {
                    "enum" : [
                        "BLEND"
                    ],
                    "description" : "The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator). - The alpha rendering mode of the material."
                },
                {
                    "type" : "string"
                }
            ],
            "short_description" : "The alpha rendering mode of the material."
        },
        "alphaCutoff" : {
            "type" : "number",
            "minimum" : 0,
            "default" : 0.5,
            "description" : "Specifies the cutoff threshold when in `MASK` mode. If the alpha value is greater than or equal to this value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire material as fully transparent. This value is ignored for other modes.",
            "short_description" : "The alpha cutoff value of the material."
        },
        "doubleSided" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Specifies whether the material is double sided. When this value is false, back-face culling is enabled. When this value is true, back-face culling is disabled and double sided lighting is enabled. The back-face must have its normals reversed before the lighting equation is evaluated.",
            "short_description" : "Specifies whether the material is double sided."
        }
    },
    "dependencies" : {
        "alphaCutoff" : [
            "alphaMode"
        ]
    }
}
